x = with(sleep, extra[group == 1])
y = with(sleep, extra[group == 2])
boxplot(x, y)
?with
summary(x)
sd(x)
install.packages('e1071')
iris[c(1,100,150),]
library(e1071)
train <- seq.int(1, 150, by=2)
test <- setdiff(1:150, train)
iris.svm <- svm(Species~., data=iris[train,])
iris.pred <- predict(iris.svm, iris[test,])
table(iris[test,5], iris.pred)
train
rowdata <- nrow(iris)
random_ids <- sample(rowdata, rowdata*0.5)
random_ids
iris_train <- iris[random_ids,]
iris_train
iris_pred <- iris[-random_ids,]
iris_svm <- ksvm(Species~., data=iris_train)
librar(kernlab)
library(kernlab)
iris_svm <- ksvm(Species~., data=iris_train)
iris_svm
result_pred <- predict(iris_svm, iris_pred)
result_pred
table(result_pred, iris_pred$Species)
plot(result_pred, iris_pred$Species)
x <- as.matrix(iris[,1:4])
iris.kpcl <- kpca(x,kernel="rbfdot",features=2,kpar—list(sgma=0.1))
iris.kpcl <- kpca(x,kernel="rbfdot",features=2,kpar=list(sgma=0.1))
iris.kpcl <- kpca(x,kernel="rbfdot",features=2,kpar=list(sigma=0.1))
plot(pcv(iris.kpcl1), col=as.integer(iris[,5]))
iris.kpc1 <- kpca(x,kernel="rbfdot",features=2,kpar=list(sigma=0.1))
plot(pcv(iris.kpc1), col=as.integer(iris[,5]))
iris.kpc2 <- kpca(x, kernel="polydot", features=2, kpar=list(degree=1))
plot(pcv(iris.kpc2), col=as.integer(iris[,5]))
predict(kpc(iris.kpc1),new.data)
predict(kpca(iris.kpc1),new.data)
predict(kpc(iris.kpc1),new.data)
library(kernlab)
predict(kpc(iris.kpc1),new.data)
set.seed(10)
y <- as.matrix(iris[51:150,5])
iris1 <- data.frame(iris[51:150,3:4], y)
ir.ksvm <- ksvm(y~.data=iris1)
ir.ksvm <- ksvm(y~., data=iris1)
plot(ir.ksvm, data=iris1[,1:2])
table(iris1$y, predict(ir.ksvm,iris1[,1:2]))
View(iris1)
View(iris_train)
View(iris1)
View(iris_train)
View(iris_pred)
plot(iris_ksvm, data=iris_train)
plot(iris_svm, data=iris_train)
View(iris1)
View(iris1)
View(iris_train)
View(iris1)
View(x)
View(x)
View(y)
View(iris1)
View(y)
View(y)
z<-data.frame(iris[51:150,3:5])
View(z)
View(z)
ir.ksvm <- ksvm(Species~.,data=iris1)
ir.ksvm <- ksvm(Species~.,data=z)
plot(ir.ksvm,data=z[,1:2])
table(iris1$y, prdict(ir.ksvm,iris1[,1:2]))
table(iris1$y, predict(ir.ksvm,iris1[,1:2]))
table(z$Species, predict(ir.ksvm,z[,1:2]))
y <- as.matrix(iris[51:150,5])
iris1 <- data.frame(iris[51:150,3:4], y)
ir.ksvm <- ksvm(y~., data=iris1)
table(iris1$y, predict(ir.ksvm,iris1[,1:2]))
library(kernlab)
data(spam )
View(spam)
nrow(spam)
set.seed(50)
tr.num <- sample(4601, 2500)
spam.train <- spam[tr.num]
spam.test <- spam[-tr.num]
spam.train <- spam[tr.num,]
spam.test <- spam[-tr.num,]
spam.bag <- bagging(type~., data=spam.train, nbagg=40)
install.packages("ipred")
library(ipred)
spam.bag <- bagging(type~., data=spam.train, nbagg=40)
spam.bagp <- predict(spam.bag, spam.test[,-58], tpe="class")
spam.bagp <- predict(spam.bag, spam.test[,58], type="class")
spam.bagp <- predict(spam.bag, spam.test[,-58], type="class")
spam.bagt <- table(spam.test[,58],spam.bagp)
(spam.bagt <- table(spam.test[,58],spam.bagp))
sum(diag(spam.bagt))/sum(spam.bagt)
diag(spam.bagt)
spam.bagt
diag(4)
diag(3)
diag(5)
diag(5,3)
sum(spam.bagt)
bagging(type~., data=spam.train, nbagg=40)
predict(spam.bag, spam.test[,-58], type="class")
rm(list=ls())
library(xgboost)
library(Matrix)
train <- read.csv("short_prac_train.csv")
test <- read.csv("short_prac_test.csv")
(train.mx <- sparse.model.matrix(label~., train))
train.mx <- sparse.model.matrix(label~., train)
test.mx <- sparse.mode.matrix(label~., test)
test.mx <- sparse.model.matrix(label~., test)
dtrain <- xgb.DMatrix(train.mx, label=train$label)
dtest <- xgb.DMatrix(test.mx, label=test$label)
train.gdbt <- xgb.train(params=list(objective="multi:softmax", num_class=10, eval_metric="mlogloss", eta=0.2, max_depth=5, shbsample=1, colsample_bytree=0.5), data=dtrain, nrounds=150, watchlist=list(eval=dtest, train=dtrain))
pred <- predict(train.gdbt, newdata=dtest)
sum(diag(table(test$label,pred)))/nrow(test)
xors <- read.table("xor_simple.txt",header=T)
xorc <- read.table("xor_complex.txt", header=T)
px <- seq(-4,4,0.03)
py <- seq(-4,4,0.03)
pgrid1 <- expand.grid(px,py)
names(pgrid1) <- names(xors)[-3]
library(xgboost)
library(Matrix)
xors$label <- xors$label-1
xorc$label <- xorc$label-1
xors.mx <- sparse.model.matrix(label~.,xors)
xorc.mx <- sparse.model.matrix(label~.,xorc)
pgrid1.mx <- sparse.model.matrix(~.,pgrid1)
dxors <- xgb.DMatrix(xors.mx, label=xors$label)
dxorc <- xgb.DMatrix(xorc.mx, label=xorc$label)
dpgrid1 <- xgb.DMatrix(pgrid1.mx)
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss",data=dxors,nrounds=100))
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxors,nrounds=100)
xorc.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxorc,nrounds=100)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,-4,0,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim(-4,4),pch=19,cex=2.50)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=2.50)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=2,cex=2.50)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=2.50)
plot(xorc[,-3],col=c(rep('blue',5),rep('red',5)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=2.50)
plot(xorc[,-3],col=c(rep('blue',5),rep('red',5)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=0.50)
plot(xorc[,-3],col=c(rep('blue',5),rep('red',5)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
plot(xorc[,-3],col=c(rep('blue',5),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xors[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xors.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=5,xlim=c(-4,4),ylim=c(-4,4))
contour(px,py,array(predict(xors.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xors[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xors.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xors.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xorc.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
library(xgboost)
library(Matrix)
xorc <- read.table("xor_complex.txt", header=T)
xors$label <- xors$label-1
xorc$label <- xorc$label-1
xors.mx <- sparse.model.matrix(label~.,xors)
xorc.mx <- sparse.model.matrix(label~.,xorc)
pgrid1.mx <- sparse.model.matrix(~.,pgrid1)
dxors <- xgb.DMatrix(xors.mx, label=xors$label)
dxorc <- xgb.DMatrix(xorc.mx, label=xorc$label)
dpgrid1 <- xgb.DMatrix(pgrid1.mx)
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxors,nrounds=100)
xorc.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxorc,nrounds=100)
xors.mx <- sparse.model.matrix(label~.,xors)
xorc.mx <- sparse.model.matrix(label~.,xorc)
pgrid1.mx <- sparse.model.matrix(~.,pgrid1)
dxors <- xgb.DMatrix(xors.mx, label=xors$label)
dxorc <- xgb.DMatrix(xorc.mx, label=xorc$label)
dpgrid1 <- xgb.DMatrix(pgrid1.mx)
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxors,nrounds=100)
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxors,nrounds=100)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xors[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xors.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xorc.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
xorc.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss",eta=1,max_depth=8),data=dxorc,nrounds=100)
xors.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss"),data=dxors,nrounds=100)
xorc.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss",eta=1,max_depth=8),data=dxorc,nrounds=100)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xorc.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
xorc.gdbt <- xgb.train(params=list(objective="binary:logistic",eval_metric="logloss",eta=0.1,max_depth=4),data=dxorc,nrounds=100)
plot(c(),type='n',xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
rect(0,0,4,4,col='#aaaaff')
rect(-4,0,0,4,col='#ffaaaa')
rect(-4,-4,0,0,col='#aaaaff')
rect(0,-4,4,0,col='#ffaaaa')
par(new=T)
plot(xorc[,-3],col=c(rep('blue',50),rep('red',50)),xlim=c(-4,4),ylim=c(-4,4),pch=19,cex=1)
par(new=T)
contour(px,py,array(predict(xorc.gdbt,newdata=dpgrid1),dim=c(length(px),length(py))),levels=0.5,drawlabels=T,col='purple',lwd=2,xlim=c(-4,4),ylim=c(-4,4))
seiseki <- matrix(c(89,90,67,46,50,57,70,80,85,90,80,90,35,40,50,40,60,50,45,55,78,85,45,55,6,55,65,80,75,85,90,85,88,92,95), 7, 5, byrow=TRUE)
colnames(seiseki) <- c("算数","理科","国語","英語","社会")
rownames(seiseki) <- c("田中","佐藤","鈴木","本田","川端","吉野","斎藤")
seiseki.d <- dist(seiseki)
round(seiseki.d)
sei.d <- dist(seiseki)
(sei.hc <- hclust(sei.d))
summary(sei.hc)
sei.hc$merge
sei.hc$height
sei.hc$order
par(mfrow=c(2,2))
plot(sei.hc,main="最遠隣方")
plot(sei.hc,main="最遠隣方",fileEncoding="CP932")
seiseki <- matrix(c(89,90,67,46,50,57,70,80,85,90,80,90,35,40,50,40,60,50,45,55,78,85,45,55,6,55,65,80,75,85,90,85,88,92,95), 7, 5, byrow=TRUE)
colnames(seiseki) <- c("math","science","language","english","society")
rownames(seiseki) <- c("tanaka","sato","suzuki","honda","kawabata","yoshino","saito")
seiseki.d <- dist(seiseki)
round(seiseki.d)
sei.d <- dist(seiseki)
(sei.hc <- hclust(sei.d))
summary(sei.hc)
sei.hc$merge
sei.hc$height
sei.hc$order
par(mfrow=c(2,2))
plot(sei.hc,main="")
plot(sei.hc,main="Farthest neighbor method")
par(mfrow=c(2,2))
plot(sei.hc,main="Farthest neighbor method")
plot(sei.hc, hang=-1, main="Farthest neighbor method") #hang=-1はラベルの高さを揃える
s.hc2 <- hclust(sei.d, method="centroid")
plot(s.hc2, hang=-1, main="Center of gravity method")
s.hc3 <- hclust(sei.d, method="ward")
plot(s.hc3, hang=-1, main="Ward method")
s.hc3 <- hclust(sei.d, method="ward.D")
plot(s.hc3, hang=-1, main="Ward method")
s.hc3 <- hclust(sei.d, method="ward")
plot(s.hc3, hang=-1, main="Ward method")
s.hc3 <- hclust(sei.d, method="ward.D2")
plot(s.hc3, hang=-1, main="Ward method")
iris2 <- iris[51:150, 1:4]
iris2.hc <- hclust(dist(iris2), "ward.D2")
(iris2.cl <- cutree(iris2.hc, k=2))
iris2.lab <- c(rep(1,50), rep(2,50))
table(iris2.lab, iris2.cl)
iris2.cop <- cophenetic(iris2.hc)
iris2.cop
cor(iris2.cop, dist(iris2))
iris2.ta <- table(iris2.lab, iris2.cl)
sum(diag(iris2.ta))/100
s.hc2 <- hclust(sei.d, method="single")
plot(s.hc2, hang=-1, main="Center of gravity method")
s.hc2 <- hclust(sei.d, method="average")
plot(s.hc2, hang=-1, main="Center of gravity method")
seisek
seiseki
View(iris2)
View(iris2)
table(iris2.lab, iris2.cl)
iris2.cl
iris2.cl
iris2.lab
View(iris2)
View(iris2)
View(seiseki)
View(seiseki)
View(iris2)
View(iris2)
seiseki.d <- dist(seiseki)
round(seiseki.d)
summary(sei.hc)
sei.hc$merge
sei.hc$height
sei.hc$order
par(mfrow=c(2,2))
plot(sei.hc, main="Farthest neighbor method")
plot(sei.hc, hang=-1, main="Farthest neighbor method") #hang=-1はラベルの高さを揃える
iris2 <- iris[51:150, 1:4]
iris2.hc <- hclust(dist(iris2), "ward.D2")
(iris2.cl <- cutree(iris2.hc, k=2))
iris2.lab <- c(rep(1,50), rep(2,50))
table(iris2.lab, iris2.cl)
iris2.cop <- cophenetic(iris2.hc)
cor(iris2.cop, dist(iris2))
iris2.ta <- table(iris2.lab, iris2.cl)
sum(diag(iris2.ta))/100
plot(iris2.hc, hang=-1, main="ward.D2")
iris2.km <- kmeans(iris2,2)
table(iris2.lab,iris2.km$cluster)/50
